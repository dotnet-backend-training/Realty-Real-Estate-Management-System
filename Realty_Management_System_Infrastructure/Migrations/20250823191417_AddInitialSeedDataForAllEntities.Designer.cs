// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Realty_Management_System_Infrastructure.Data.Contexts;

#nullable disable

namespace Realty_Management_System_Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250823191417_AddInitialSeedDataForAllEntities")]
    partial class AddInitialSeedDataForAllEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Realty_Management_System_Domain.Entities.Amenity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Amenities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000401-0000-0000-0000-000000000401"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 369, DateTimeKind.Utc).AddTicks(9391),
                            Name = "Swimming Pool"
                        },
                        new
                        {
                            Id = new Guid("00000402-0000-0000-0000-000000000402"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 369, DateTimeKind.Utc).AddTicks(9401),
                            Name = "Gym"
                        },
                        new
                        {
                            Id = new Guid("00000403-0000-0000-0000-000000000403"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 369, DateTimeKind.Utc).AddTicks(9402),
                            Name = "Parking"
                        },
                        new
                        {
                            Id = new Guid("00000404-0000-0000-0000-000000000404"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 369, DateTimeKind.Utc).AddTicks(9403),
                            Name = "Elevator"
                        },
                        new
                        {
                            Id = new Guid("00000405-0000-0000-0000-000000000405"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 369, DateTimeKind.Utc).AddTicks(9404),
                            Name = "Garden"
                        });
                });

            modelBuilder.Entity("Realty_Management_System_Domain.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(9,6)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(9,6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000101-0000-0000-0000-000000000101"),
                            CountryId = new Guid("00000001-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 370, DateTimeKind.Utc).AddTicks(5139),
                            Latitude = 32.2211m,
                            Longitude = 35.2544m,
                            Name = "Nablus"
                        },
                        new
                        {
                            Id = new Guid("00000102-0000-0000-0000-000000000102"),
                            CountryId = new Guid("00000001-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 370, DateTimeKind.Utc).AddTicks(5146),
                            Latitude = 31.9076m,
                            Longitude = 35.2034m,
                            Name = "Ramallah"
                        },
                        new
                        {
                            Id = new Guid("00000103-0000-0000-0000-000000000103"),
                            CountryId = new Guid("00000001-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 370, DateTimeKind.Utc).AddTicks(5149),
                            Latitude = 31.5326m,
                            Longitude = 35.0998m,
                            Name = "Hebron"
                        },
                        new
                        {
                            Id = new Guid("00000104-0000-0000-0000-000000000104"),
                            CountryId = new Guid("00000001-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 370, DateTimeKind.Utc).AddTicks(5152),
                            Latitude = 31.7054m,
                            Longitude = 35.2024m,
                            Name = "Bethlehem"
                        },
                        new
                        {
                            Id = new Guid("00000105-0000-0000-0000-000000000105"),
                            CountryId = new Guid("00000001-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 370, DateTimeKind.Utc).AddTicks(5161),
                            Latitude = 32.4576m,
                            Longitude = 35.2936m,
                            Name = "Jenin"
                        });
                });

            modelBuilder.Entity("Realty_Management_System_Domain.Entities.Contract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContractTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PaymentFrequencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PropertyReviewId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ContractTypeId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PaymentFrequencyId");

                    b.HasIndex("PropertyId");

                    b.ToTable("Contracts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000601-0000-0000-0000-000000000601"),
                            ContractTypeId = new Guid("00000501-0000-0000-0000-000000000501"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 375, DateTimeKind.Utc).AddTicks(2020),
                            CustomerId = new Guid("00000302-0000-0000-0000-000000000302"),
                            EndDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OwnerId = new Guid("00000301-0000-0000-0000-000000000301"),
                            PaymentFrequencyId = new Guid("00001001-0000-0000-0000-000000001001"),
                            PropertyId = new Guid("00001801-0000-0000-0000-000000001801"),
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalAmount = 12000m
                        },
                        new
                        {
                            Id = new Guid("00000602-0000-0000-0000-000000000602"),
                            ContractTypeId = new Guid("00000502-0000-0000-0000-000000000502"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 375, DateTimeKind.Utc).AddTicks(2033),
                            CustomerId = new Guid("00000303-0000-0000-0000-000000000303"),
                            EndDate = new DateTime(2025, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OwnerId = new Guid("00000301-0000-0000-0000-000000000301"),
                            PaymentFrequencyId = new Guid("00001002-0000-0000-0000-000000001002"),
                            PropertyId = new Guid("00001802-0000-0000-0000-000000001802"),
                            StartDate = new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalAmount = 6000m
                        },
                        new
                        {
                            Id = new Guid("00000603-0000-0000-0000-000000000603"),
                            ContractTypeId = new Guid("00000503-0000-0000-0000-000000000503"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 375, DateTimeKind.Utc).AddTicks(2036),
                            CustomerId = new Guid("00000301-0000-0000-0000-000000000301"),
                            EndDate = new DateTime(2025, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OwnerId = new Guid("00000302-0000-0000-0000-000000000302"),
                            PaymentFrequencyId = new Guid("00001003-0000-0000-0000-000000001003"),
                            PropertyId = new Guid("00001803-0000-0000-0000-000000001803"),
                            StartDate = new DateTime(2025, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalAmount = 9000m
                        },
                        new
                        {
                            Id = new Guid("00000604-0000-0000-0000-000000000604"),
                            ContractTypeId = new Guid("00000501-0000-0000-0000-000000000501"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 375, DateTimeKind.Utc).AddTicks(2038),
                            CustomerId = new Guid("00000302-0000-0000-0000-000000000302"),
                            EndDate = new DateTime(2025, 10, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OwnerId = new Guid("00000303-0000-0000-0000-000000000303"),
                            PaymentFrequencyId = new Guid("00001001-0000-0000-0000-000000001001"),
                            PropertyId = new Guid("00001804-0000-0000-0000-000000001804"),
                            StartDate = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalAmount = 15000m
                        },
                        new
                        {
                            Id = new Guid("00000605-0000-0000-0000-000000000605"),
                            ContractTypeId = new Guid("00000502-0000-0000-0000-000000000502"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 375, DateTimeKind.Utc).AddTicks(2041),
                            CustomerId = new Guid("00000303-0000-0000-0000-000000000303"),
                            EndDate = new DateTime(2025, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OwnerId = new Guid("00000302-0000-0000-0000-000000000302"),
                            PaymentFrequencyId = new Guid("00001005-0000-0000-0000-000000001005"),
                            PropertyId = new Guid("00001805-0000-0000-0000-000000001805"),
                            StartDate = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalAmount = 7500m
                        });
                });

            modelBuilder.Entity("Realty_Management_System_Domain.Entities.ContractType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ContractTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000501-0000-0000-0000-000000000501"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 375, DateTimeKind.Utc).AddTicks(4263),
                            Name = "Sale"
                        },
                        new
                        {
                            Id = new Guid("00000502-0000-0000-0000-000000000502"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 375, DateTimeKind.Utc).AddTicks(4265),
                            Name = "Rent"
                        },
                        new
                        {
                            Id = new Guid("00000503-0000-0000-0000-000000000503"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 375, DateTimeKind.Utc).AddTicks(4267),
                            Name = "Lease"
                        });
                });

            modelBuilder.Entity("Realty_Management_System_Domain.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ISOCode")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000001-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 375, DateTimeKind.Utc).AddTicks(9148),
                            ISOCode = "PS",
                            Name = "Palestine"
                        });
                });

            modelBuilder.Entity("Realty_Management_System_Domain.Entities.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("InvoiceStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("InvoiceStatusId");

                    b.ToTable("Invoices");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00001901-0000-0000-0000-000000001901"),
                            Amount = 1500.00m,
                            ContractId = new Guid("00000601-0000-0000-0000-000000000601"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 376, DateTimeKind.Utc).AddTicks(3054),
                            DueDate = new DateTime(2025, 9, 12, 19, 14, 17, 376, DateTimeKind.Utc).AddTicks(3062),
                            InvoiceStatusId = new Guid("00000901-0000-0000-0000-000000000901"),
                            IssueDate = new DateTime(2025, 8, 13, 19, 14, 17, 376, DateTimeKind.Utc).AddTicks(3056)
                        },
                        new
                        {
                            Id = new Guid("00001902-0000-0000-0000-000000001902"),
                            Amount = 2500.00m,
                            ContractId = new Guid("00000602-0000-0000-0000-000000000602"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 376, DateTimeKind.Utc).AddTicks(3064),
                            DueDate = new DateTime(2025, 9, 2, 19, 14, 17, 376, DateTimeKind.Utc).AddTicks(3065),
                            InvoiceStatusId = new Guid("00000902-0000-0000-0000-000000000902"),
                            IssueDate = new DateTime(2025, 8, 3, 19, 14, 17, 376, DateTimeKind.Utc).AddTicks(3065)
                        },
                        new
                        {
                            Id = new Guid("00001903-0000-0000-0000-000000001903"),
                            Amount = 3200.00m,
                            ContractId = new Guid("00000603-0000-0000-0000-000000000603"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 376, DateTimeKind.Utc).AddTicks(3067),
                            DueDate = new DateTime(2025, 8, 18, 19, 14, 17, 376, DateTimeKind.Utc).AddTicks(3068),
                            InvoiceStatusId = new Guid("00000903-0000-0000-0000-000000000903"),
                            IssueDate = new DateTime(2025, 7, 24, 19, 14, 17, 376, DateTimeKind.Utc).AddTicks(3068)
                        },
                        new
                        {
                            Id = new Guid("00001904-0000-0000-0000-000000001904"),
                            Amount = 4100.00m,
                            ContractId = new Guid("00000604-0000-0000-0000-000000000604"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 376, DateTimeKind.Utc).AddTicks(3070),
                            DueDate = new DateTime(2025, 9, 7, 19, 14, 17, 376, DateTimeKind.Utc).AddTicks(3071),
                            InvoiceStatusId = new Guid("00000904-0000-0000-0000-000000000904"),
                            IssueDate = new DateTime(2025, 8, 8, 19, 14, 17, 376, DateTimeKind.Utc).AddTicks(3070)
                        },
                        new
                        {
                            Id = new Guid("00001905-0000-0000-0000-000000001905"),
                            Amount = 5000.00m,
                            ContractId = new Guid("00000605-0000-0000-0000-000000000605"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 376, DateTimeKind.Utc).AddTicks(3072),
                            DueDate = new DateTime(2025, 9, 17, 19, 14, 17, 376, DateTimeKind.Utc).AddTicks(3073),
                            InvoiceStatusId = new Guid("00000905-0000-0000-0000-000000000905"),
                            IssueDate = new DateTime(2025, 8, 18, 19, 14, 17, 376, DateTimeKind.Utc).AddTicks(3073)
                        });
                });

            modelBuilder.Entity("Realty_Management_System_Domain.Entities.InvoiceStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("InvoiceStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000901-0000-0000-0000-000000000901"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 376, DateTimeKind.Utc).AddTicks(5238),
                            Name = "Pending"
                        },
                        new
                        {
                            Id = new Guid("00000902-0000-0000-0000-000000000902"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 376, DateTimeKind.Utc).AddTicks(5241),
                            Name = "Paid"
                        },
                        new
                        {
                            Id = new Guid("00000903-0000-0000-0000-000000000903"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 376, DateTimeKind.Utc).AddTicks(5242),
                            Name = "Overdue"
                        },
                        new
                        {
                            Id = new Guid("00000904-0000-0000-0000-000000000904"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 376, DateTimeKind.Utc).AddTicks(5243),
                            Name = "Cancelled"
                        },
                        new
                        {
                            Id = new Guid("00000905-0000-0000-0000-000000000905"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 376, DateTimeKind.Utc).AddTicks(5244),
                            Name = "Refunded"
                        });
                });

            modelBuilder.Entity("Realty_Management_System_Domain.Entities.NearbyPlace", b =>
                {
                    b.Property<Guid>("NearbyPlaceTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("DistanceInKm")
                        .HasPrecision(6, 2)
                        .HasColumnType("float(6)");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("NearbyPlaceTypeId", "PropertyId");

                    b.HasIndex("PropertyId");

                    b.ToTable("NearbyPlaces");

                    b.HasData(
                        new
                        {
                            NearbyPlaceTypeId = new Guid("00000801-0000-0000-0000-000000000801"),
                            PropertyId = new Guid("00001801-0000-0000-0000-000000001801"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 377, DateTimeKind.Utc).AddTicks(1206),
                            DistanceInKm = 0.5,
                            Id = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Central Park"
                        },
                        new
                        {
                            NearbyPlaceTypeId = new Guid("00000802-0000-0000-0000-000000000802"),
                            PropertyId = new Guid("00001801-0000-0000-0000-000000001801"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 377, DateTimeKind.Utc).AddTicks(1209),
                            DistanceInKm = 1.2,
                            Id = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Metro Station"
                        },
                        new
                        {
                            NearbyPlaceTypeId = new Guid("00000803-0000-0000-0000-000000000803"),
                            PropertyId = new Guid("00001802-0000-0000-0000-000000001802"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 377, DateTimeKind.Utc).AddTicks(1210),
                            DistanceInKm = 2.5,
                            Id = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Shopping Mall"
                        },
                        new
                        {
                            NearbyPlaceTypeId = new Guid("00000804-0000-0000-0000-000000000804"),
                            PropertyId = new Guid("00001803-0000-0000-0000-000000001803"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 377, DateTimeKind.Utc).AddTicks(1211),
                            DistanceInKm = 1.8,
                            Id = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Hospital"
                        },
                        new
                        {
                            NearbyPlaceTypeId = new Guid("00000805-0000-0000-0000-000000000805"),
                            PropertyId = new Guid("00001804-0000-0000-0000-000000001804"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 377, DateTimeKind.Utc).AddTicks(1212),
                            DistanceInKm = 0.80000000000000004,
                            Id = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "School"
                        });
                });

            modelBuilder.Entity("Realty_Management_System_Domain.Entities.NearbyPlaceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("NearbyPlaceTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000801-0000-0000-0000-000000000801"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 377, DateTimeKind.Utc).AddTicks(4013),
                            Name = "School"
                        },
                        new
                        {
                            Id = new Guid("00000802-0000-0000-0000-000000000802"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 377, DateTimeKind.Utc).AddTicks(4023),
                            Name = "Hospital"
                        },
                        new
                        {
                            Id = new Guid("00000803-0000-0000-0000-000000000803"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 377, DateTimeKind.Utc).AddTicks(4024),
                            Name = "Shopping Center"
                        },
                        new
                        {
                            Id = new Guid("00000804-0000-0000-0000-000000000804"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 377, DateTimeKind.Utc).AddTicks(4025),
                            Name = "Park"
                        },
                        new
                        {
                            Id = new Guid("00000805-0000-0000-0000-000000000805"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 377, DateTimeKind.Utc).AddTicks(4026),
                            Name = "Restaurant"
                        });
                });

            modelBuilder.Entity("Realty_Management_System_Domain.Entities.PaymentFrequency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PaymentFrequencies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00001001-0000-0000-0000-000000001001"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 377, DateTimeKind.Utc).AddTicks(6579),
                            Name = "Monthly"
                        },
                        new
                        {
                            Id = new Guid("00001002-0000-0000-0000-000000001002"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 377, DateTimeKind.Utc).AddTicks(6581),
                            Name = "Quarterly"
                        },
                        new
                        {
                            Id = new Guid("00001003-0000-0000-0000-000000001003"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 377, DateTimeKind.Utc).AddTicks(6583),
                            Name = "Annually"
                        },
                        new
                        {
                            Id = new Guid("00001004-0000-0000-0000-000000001004"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 377, DateTimeKind.Utc).AddTicks(6584),
                            Name = "Weekly"
                        },
                        new
                        {
                            Id = new Guid("00001005-0000-0000-0000-000000001005"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 377, DateTimeKind.Utc).AddTicks(6585),
                            Name = "Bi-Weekly"
                        });
                });

            modelBuilder.Entity("Realty_Management_System_Domain.Entities.PaymentMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00001101-0000-0000-0000-000000001101"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 377, DateTimeKind.Utc).AddTicks(8951),
                            Name = "Cash"
                        },
                        new
                        {
                            Id = new Guid("00001102-0000-0000-0000-000000001102"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 377, DateTimeKind.Utc).AddTicks(8953),
                            Name = "Credit Card"
                        },
                        new
                        {
                            Id = new Guid("00001103-0000-0000-0000-000000001103"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 377, DateTimeKind.Utc).AddTicks(8955),
                            Name = "Bank Transfer"
                        },
                        new
                        {
                            Id = new Guid("00001104-0000-0000-0000-000000001104"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 377, DateTimeKind.Utc).AddTicks(8956),
                            Name = "Mobile Wallet"
                        },
                        new
                        {
                            Id = new Guid("00001105-0000-0000-0000-000000001105"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 377, DateTimeKind.Utc).AddTicks(8957),
                            Name = "PayPal"
                        });
                });

            modelBuilder.Entity("Realty_Management_System_Domain.Entities.PriceUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal?>("ConversionFactor")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("PriceUnitTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Abbreviation")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("PriceUnitTypeId");

                    b.ToTable("PriceUnits");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00002201-0000-0000-0000-000000002201"),
                            Abbreviation = "m²",
                            ConversionFactor = 1.0m,
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 378, DateTimeKind.Utc).AddTicks(4179),
                            Name = "Per Square Meter",
                            PriceUnitTypeId = new Guid("00001301-0000-0000-0000-000000001301"),
                            Symbol = "sqm"
                        },
                        new
                        {
                            Id = new Guid("00002202-0000-0000-0000-000000002202"),
                            Abbreviation = "ft²",
                            ConversionFactor = 0.092903m,
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 378, DateTimeKind.Utc).AddTicks(4185),
                            Name = "Per Square Foot",
                            PriceUnitTypeId = new Guid("00001302-0000-0000-0000-000000001302"),
                            Symbol = "sqft"
                        },
                        new
                        {
                            Id = new Guid("00002203-0000-0000-0000-000000002203"),
                            Abbreviation = "mo",
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 378, DateTimeKind.Utc).AddTicks(4187),
                            Name = "Per Month",
                            PriceUnitTypeId = new Guid("00001303-0000-0000-0000-000000001303"),
                            Symbol = "per month"
                        },
                        new
                        {
                            Id = new Guid("00002204-0000-0000-0000-000000002204"),
                            Abbreviation = "yr",
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 378, DateTimeKind.Utc).AddTicks(4189),
                            Name = "Per Year",
                            PriceUnitTypeId = new Guid("00001304-0000-0000-0000-000000001304"),
                            Symbol = "per year"
                        },
                        new
                        {
                            Id = new Guid("00002205-0000-0000-0000-000000002205"),
                            Abbreviation = "total",
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 378, DateTimeKind.Utc).AddTicks(4191),
                            Name = "Total Price",
                            PriceUnitTypeId = new Guid("00001305-0000-0000-0000-000000001305"),
                            Symbol = "total"
                        });
                });

            modelBuilder.Entity("Realty_Management_System_Domain.Entities.PriceUnitType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PriceUnitTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00001301-0000-0000-0000-000000001301"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 378, DateTimeKind.Utc).AddTicks(6751),
                            Name = "Per Square Meter"
                        },
                        new
                        {
                            Id = new Guid("00001302-0000-0000-0000-000000001302"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 378, DateTimeKind.Utc).AddTicks(6754),
                            Name = "Per Square Foot"
                        },
                        new
                        {
                            Id = new Guid("00001303-0000-0000-0000-000000001303"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 378, DateTimeKind.Utc).AddTicks(6755),
                            Name = "Per Month"
                        },
                        new
                        {
                            Id = new Guid("00001304-0000-0000-0000-000000001304"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 378, DateTimeKind.Utc).AddTicks(6756),
                            Name = "Per Year"
                        },
                        new
                        {
                            Id = new Guid("00001305-0000-0000-0000-000000001305"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 378, DateTimeKind.Utc).AddTicks(6765),
                            Name = "Total Price"
                        });
                });

            modelBuilder.Entity("Realty_Management_System_Domain.Entities.Property", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("NumberOfBathrooms")
                        .HasColumnType("int");

                    b.Property<int?>("NumberOfBedrooms")
                        .HasColumnType("int");

                    b.Property<int?>("NumberOfFloors")
                        .HasColumnType("int");

                    b.Property<int?>("NumberOfGarage")
                        .HasColumnType("int");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("PriceUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PropertyStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("YearBuilt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ZoneId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PriceUnitId");

                    b.HasIndex("PropertyStatusId");

                    b.HasIndex("ZoneId");

                    b.ToTable("Properties");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00001801-0000-0000-0000-000000001801"),
                            CityId = new Guid("00000101-0000-0000-0000-000000000101"),
                            CountryId = new Guid("00000001-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 381, DateTimeKind.Utc).AddTicks(8877),
                            Description = "Modern 2-bedroom apartment in the city center",
                            NumberOfBathrooms = 1,
                            NumberOfBedrooms = 2,
                            NumberOfFloors = 1,
                            NumberOfGarage = 0,
                            OwnerId = new Guid("00000301-0000-0000-0000-000000000301"),
                            Price = 55000m,
                            PriceUnitId = new Guid("00002205-0000-0000-0000-000000002205"),
                            PropertyStatusId = new Guid("00001401-0000-0000-0000-000000001401"),
                            Slug = "modern-apartment-nablus",
                            YearBuilt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZoneId = new Guid("00000201-0000-0000-0000-000000000201")
                        },
                        new
                        {
                            Id = new Guid("00001802-0000-0000-0000-000000001802"),
                            CityId = new Guid("00000101-0000-0000-0000-000000000101"),
                            CountryId = new Guid("00000001-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 381, DateTimeKind.Utc).AddTicks(8898),
                            Description = "Spacious villa with garden and garage",
                            NumberOfBathrooms = 3,
                            NumberOfBedrooms = 4,
                            NumberOfFloors = 2,
                            NumberOfGarage = 1,
                            OwnerId = new Guid("00000302-0000-0000-0000-000000000302"),
                            Price = 250000m,
                            PriceUnitId = new Guid("00002205-0000-0000-0000-000000002205"),
                            PropertyStatusId = new Guid("00001401-0000-0000-0000-000000001401"),
                            Slug = "villa-rafidia",
                            YearBuilt = new DateTime(2015, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZoneId = new Guid("00000203-0000-0000-0000-000000000203")
                        },
                        new
                        {
                            Id = new Guid("00001803-0000-0000-0000-000000001803"),
                            CityId = new Guid("00000101-0000-0000-0000-000000000101"),
                            CountryId = new Guid("00000001-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 381, DateTimeKind.Utc).AddTicks(8904),
                            Description = "Affordable family home in Balata",
                            NumberOfBathrooms = 2,
                            NumberOfBedrooms = 3,
                            NumberOfFloors = 2,
                            NumberOfGarage = 0,
                            OwnerId = new Guid("00000303-0000-0000-0000-000000000303"),
                            Price = 80000m,
                            PriceUnitId = new Guid("00002205-0000-0000-0000-000000002205"),
                            PropertyStatusId = new Guid("00001401-0000-0000-0000-000000001401"),
                            Slug = "balata-house",
                            YearBuilt = new DateTime(2010, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZoneId = new Guid("00000202-0000-0000-0000-000000000202")
                        },
                        new
                        {
                            Id = new Guid("00001804-0000-0000-0000-000000001804"),
                            CityId = new Guid("00000101-0000-0000-0000-000000000101"),
                            CountryId = new Guid("00000001-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 381, DateTimeKind.Utc).AddTicks(8909),
                            Description = "Small 1-bedroom apartment near market",
                            NumberOfBathrooms = 1,
                            NumberOfBedrooms = 1,
                            NumberOfFloors = 1,
                            NumberOfGarage = 0,
                            OwnerId = new Guid("00000301-0000-0000-0000-000000000301"),
                            Price = 30000m,
                            PriceUnitId = new Guid("00002205-0000-0000-0000-000000002205"),
                            PropertyStatusId = new Guid("00001404-0000-0000-0000-000000001404"),
                            Slug = "askar-apartment",
                            YearBuilt = new DateTime(2018, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZoneId = new Guid("00000204-0000-0000-0000-000000000204")
                        },
                        new
                        {
                            Id = new Guid("00001805-0000-0000-0000-000000001805"),
                            CityId = new Guid("00000101-0000-0000-0000-000000000101"),
                            CountryId = new Guid("00000001-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 381, DateTimeKind.Utc).AddTicks(8913),
                            Description = "Empty land for investment",
                            OwnerId = new Guid("00000302-0000-0000-0000-000000000302"),
                            Price = 150000m,
                            PriceUnitId = new Guid("00002205-0000-0000-0000-000000002205"),
                            PropertyStatusId = new Guid("00001401-0000-0000-0000-000000001401"),
                            Slug = "beit-furiq-land",
                            YearBuilt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZoneId = new Guid("00000205-0000-0000-0000-000000000205")
                        });
                });

            modelBuilder.Entity("Realty_Management_System_Domain.Entities.PropertyAmenity", b =>
                {
                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AmenityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("PropertyId", "AmenityId");

                    b.HasIndex("AmenityId");

                    b.ToTable("PropertyAmenities");

                    b.HasData(
                        new
                        {
                            PropertyId = new Guid("00001801-0000-0000-0000-000000001801"),
                            AmenityId = new Guid("00000401-0000-0000-0000-000000000401"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 379, DateTimeKind.Utc).AddTicks(1452),
                            Id = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            PropertyId = new Guid("00001801-0000-0000-0000-000000001801"),
                            AmenityId = new Guid("00000402-0000-0000-0000-000000000402"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 379, DateTimeKind.Utc).AddTicks(1454),
                            Id = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            PropertyId = new Guid("00001802-0000-0000-0000-000000001802"),
                            AmenityId = new Guid("00000403-0000-0000-0000-000000000403"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 379, DateTimeKind.Utc).AddTicks(1455),
                            Id = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            PropertyId = new Guid("00001803-0000-0000-0000-000000001803"),
                            AmenityId = new Guid("00000404-0000-0000-0000-000000000404"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 379, DateTimeKind.Utc).AddTicks(1455),
                            Id = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            PropertyId = new Guid("00001804-0000-0000-0000-000000001804"),
                            AmenityId = new Guid("00000405-0000-0000-0000-000000000405"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 379, DateTimeKind.Utc).AddTicks(1456),
                            Id = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("Realty_Management_System_Domain.Entities.PropertyCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PropertyCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00001601-0000-0000-0000-000000001601"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 379, DateTimeKind.Utc).AddTicks(9807),
                            Name = "Apartment"
                        },
                        new
                        {
                            Id = new Guid("00001602-0000-0000-0000-000000001602"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 379, DateTimeKind.Utc).AddTicks(9809),
                            Name = "Villa"
                        },
                        new
                        {
                            Id = new Guid("00001603-0000-0000-0000-000000001603"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 379, DateTimeKind.Utc).AddTicks(9810),
                            Name = "Townhouse"
                        },
                        new
                        {
                            Id = new Guid("00001604-0000-0000-0000-000000001604"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 379, DateTimeKind.Utc).AddTicks(9811),
                            Name = "Office"
                        },
                        new
                        {
                            Id = new Guid("00001605-0000-0000-0000-000000001605"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 379, DateTimeKind.Utc).AddTicks(9812),
                            Name = "Retail"
                        });
                });

            modelBuilder.Entity("Realty_Management_System_Domain.Entities.PropertyCategoryAssociation", b =>
                {
                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PropertyCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("PropertyId", "PropertyCategoryId");

                    b.HasIndex("PropertyCategoryId");

                    b.ToTable("PropertyCategoryAssociations");

                    b.HasData(
                        new
                        {
                            PropertyId = new Guid("00001801-0000-0000-0000-000000001801"),
                            PropertyCategoryId = new Guid("00001601-0000-0000-0000-000000001601"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 379, DateTimeKind.Utc).AddTicks(7996),
                            Id = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            PropertyId = new Guid("00001802-0000-0000-0000-000000001802"),
                            PropertyCategoryId = new Guid("00001602-0000-0000-0000-000000001602"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 379, DateTimeKind.Utc).AddTicks(7998),
                            Id = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            PropertyId = new Guid("00001803-0000-0000-0000-000000001803"),
                            PropertyCategoryId = new Guid("00001603-0000-0000-0000-000000001603"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 379, DateTimeKind.Utc).AddTicks(7999),
                            Id = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            PropertyId = new Guid("00001804-0000-0000-0000-000000001804"),
                            PropertyCategoryId = new Guid("00001604-0000-0000-0000-000000001604"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 379, DateTimeKind.Utc).AddTicks(8000),
                            Id = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            PropertyId = new Guid("00001805-0000-0000-0000-000000001805"),
                            PropertyCategoryId = new Guid("00001605-0000-0000-0000-000000001605"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 379, DateTimeKind.Utc).AddTicks(8001),
                            Id = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("Realty_Management_System_Domain.Entities.PropertyFeature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PropertyFeatures");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00001501-0000-0000-0000-000000001501"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 383, DateTimeKind.Utc).AddTicks(4646),
                            Name = "Swimming Pool"
                        },
                        new
                        {
                            Id = new Guid("00001502-0000-0000-0000-000000001502"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 383, DateTimeKind.Utc).AddTicks(4650),
                            Name = "Gym"
                        },
                        new
                        {
                            Id = new Guid("00001503-0000-0000-0000-000000001503"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 383, DateTimeKind.Utc).AddTicks(4651),
                            Name = "Balcony"
                        },
                        new
                        {
                            Id = new Guid("00001504-0000-0000-0000-000000001504"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 383, DateTimeKind.Utc).AddTicks(4652),
                            Name = "Garden"
                        },
                        new
                        {
                            Id = new Guid("00001505-0000-0000-0000-000000001505"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 383, DateTimeKind.Utc).AddTicks(4653),
                            Name = "Garage"
                        });
                });

            modelBuilder.Entity("Realty_Management_System_Domain.Entities.PropertyFeatureAssociation", b =>
                {
                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PropertyFeatureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PropertyId", "PropertyFeatureId");

                    b.HasIndex("PropertyFeatureId");

                    b.ToTable("PropertyFeatureAssociations");

                    b.HasData(
                        new
                        {
                            PropertyId = new Guid("00001801-0000-0000-0000-000000001801"),
                            PropertyFeatureId = new Guid("00001501-0000-0000-0000-000000001501"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 382, DateTimeKind.Utc).AddTicks(9777),
                            Id = new Guid("00000000-0000-0000-0000-000000000000"),
                            Value = ""
                        },
                        new
                        {
                            PropertyId = new Guid("00001802-0000-0000-0000-000000001802"),
                            PropertyFeatureId = new Guid("00001502-0000-0000-0000-000000001502"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 382, DateTimeKind.Utc).AddTicks(9785),
                            Id = new Guid("00000000-0000-0000-0000-000000000000"),
                            Value = ""
                        },
                        new
                        {
                            PropertyId = new Guid("00001803-0000-0000-0000-000000001803"),
                            PropertyFeatureId = new Guid("00001503-0000-0000-0000-000000001503"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 382, DateTimeKind.Utc).AddTicks(9786),
                            Id = new Guid("00000000-0000-0000-0000-000000000000"),
                            Value = ""
                        },
                        new
                        {
                            PropertyId = new Guid("00001804-0000-0000-0000-000000001804"),
                            PropertyFeatureId = new Guid("00001504-0000-0000-0000-000000001504"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 382, DateTimeKind.Utc).AddTicks(9787),
                            Id = new Guid("00000000-0000-0000-0000-000000000000"),
                            Value = ""
                        },
                        new
                        {
                            PropertyId = new Guid("00001805-0000-0000-0000-000000001805"),
                            PropertyFeatureId = new Guid("00001505-0000-0000-0000-000000001505"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 382, DateTimeKind.Utc).AddTicks(9788),
                            Id = new Guid("00000000-0000-0000-0000-000000000000"),
                            Value = ""
                        });
                });

            modelBuilder.Entity("Realty_Management_System_Domain.Entities.PropertyImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AltText")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyImages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00001701-0000-0000-0000-000000001701"),
                            AltText = "Front view of the property",
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 383, DateTimeKind.Utc).AddTicks(7115),
                            PropertyId = new Guid("00001801-0000-0000-0000-000000001801"),
                            Url = "https://example.com/images/property1-front.jpg"
                        },
                        new
                        {
                            Id = new Guid("00001702-0000-0000-0000-000000001702"),
                            AltText = "Spacious living room",
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 383, DateTimeKind.Utc).AddTicks(7120),
                            PropertyId = new Guid("00001801-0000-0000-0000-000000001801"),
                            Url = "https://example.com/images/property1-livingroom.jpg"
                        },
                        new
                        {
                            Id = new Guid("00001703-0000-0000-0000-000000001703"),
                            AltText = "Master bedroom",
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 383, DateTimeKind.Utc).AddTicks(7121),
                            PropertyId = new Guid("00001802-0000-0000-0000-000000001802"),
                            Url = "https://example.com/images/property2-bedroom.jpg"
                        },
                        new
                        {
                            Id = new Guid("00001704-0000-0000-0000-000000001704"),
                            AltText = "Balcony view",
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 383, DateTimeKind.Utc).AddTicks(7122),
                            PropertyId = new Guid("00001803-0000-0000-0000-000000001803"),
                            Url = "https://example.com/images/property3-balcony.jpg"
                        },
                        new
                        {
                            Id = new Guid("00001705-0000-0000-0000-000000001705"),
                            AltText = "Modern kitchen",
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 383, DateTimeKind.Utc).AddTicks(7123),
                            PropertyId = new Guid("00001803-0000-0000-0000-000000001803"),
                            Url = "https://example.com/images/property3-kitchen.jpg"
                        });
                });

            modelBuilder.Entity("Realty_Management_System_Domain.Entities.PropertyReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Rating")
                        .HasPrecision(3, 2)
                        .HasColumnType("decimal(3,2)");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ContractId")
                        .IsUnique();

                    b.HasIndex("PropertyId");

                    b.HasIndex("UserId");

                    b.ToTable("PropertyReviews");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00002301-0000-0000-0000-000000002301"),
                            Comment = "Amazing property, well-maintained and spacious.",
                            ContractId = new Guid("00000601-0000-0000-0000-000000000601"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 385, DateTimeKind.Utc).AddTicks(6266),
                            PropertyId = new Guid("00001801-0000-0000-0000-000000001801"),
                            Rating = 4.75m,
                            TransactionId = new Guid("00002101-0000-0000-0000-000000002101"),
                            UserId = new Guid("00000301-0000-0000-0000-000000000301")
                        },
                        new
                        {
                            Id = new Guid("00002302-0000-0000-0000-000000002302"),
                            Comment = "Beautiful villa with a lovely garden.",
                            ContractId = new Guid("00000602-0000-0000-0000-000000000602"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 385, DateTimeKind.Utc).AddTicks(6272),
                            PropertyId = new Guid("00001802-0000-0000-0000-000000001802"),
                            Rating = 4.90m,
                            TransactionId = new Guid("00002102-0000-0000-0000-000000002102"),
                            UserId = new Guid("00000302-0000-0000-0000-000000000302")
                        },
                        new
                        {
                            Id = new Guid("00002303-0000-0000-0000-000000002303"),
                            Comment = "Cozy townhouse, perfect for a small family.",
                            ContractId = new Guid("00000603-0000-0000-0000-000000000603"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 385, DateTimeKind.Utc).AddTicks(6274),
                            PropertyId = new Guid("00001803-0000-0000-0000-000000001803"),
                            Rating = 4.50m,
                            TransactionId = new Guid("00002103-0000-0000-0000-000000002103"),
                            UserId = new Guid("00000303-0000-0000-0000-000000000303")
                        },
                        new
                        {
                            Id = new Guid("00002304-0000-0000-0000-000000002304"),
                            Comment = "Spacious office space with excellent location.",
                            ContractId = new Guid("00000604-0000-0000-0000-000000000604"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 385, DateTimeKind.Utc).AddTicks(6275),
                            PropertyId = new Guid("00001804-0000-0000-0000-000000001804"),
                            Rating = 4.30m,
                            TransactionId = new Guid("00002104-0000-0000-0000-000000002104"),
                            UserId = new Guid("00000301-0000-0000-0000-000000000301")
                        },
                        new
                        {
                            Id = new Guid("00002305-0000-0000-0000-000000002305"),
                            Comment = "Retail space in a busy area, good investment.",
                            ContractId = new Guid("00000605-0000-0000-0000-000000000605"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 385, DateTimeKind.Utc).AddTicks(6277),
                            PropertyId = new Guid("00001805-0000-0000-0000-000000001805"),
                            Rating = 4.60m,
                            TransactionId = new Guid("00002105-0000-0000-0000-000000002105"),
                            UserId = new Guid("00000302-0000-0000-0000-000000000302")
                        });
                });

            modelBuilder.Entity("Realty_Management_System_Domain.Entities.PropertyStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PropertyStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00001401-0000-0000-0000-000000001401"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 385, DateTimeKind.Utc).AddTicks(8169),
                            Name = "Available"
                        },
                        new
                        {
                            Id = new Guid("00001402-0000-0000-0000-000000001402"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 385, DateTimeKind.Utc).AddTicks(8171),
                            Name = "Pending"
                        },
                        new
                        {
                            Id = new Guid("00001403-0000-0000-0000-000000001403"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 385, DateTimeKind.Utc).AddTicks(8172),
                            Name = "Sold"
                        },
                        new
                        {
                            Id = new Guid("00001404-0000-0000-0000-000000001404"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 385, DateTimeKind.Utc).AddTicks(8173),
                            Name = "Rented"
                        },
                        new
                        {
                            Id = new Guid("00001405-0000-0000-0000-000000001405"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 385, DateTimeKind.Utc).AddTicks(8174),
                            Name = "Under Maintenance"
                        });
                });

            modelBuilder.Entity("Realty_Management_System_Domain.Entities.PropertyTourRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PreferredDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PropertyTourRequestStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.HasIndex("PropertyTourRequestStatusId");

                    b.HasIndex("UserId");

                    b.ToTable("PropertyTourRequests");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00002001-0000-0000-0000-000000002001"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 386, DateTimeKind.Utc).AddTicks(2040),
                            Message = "",
                            PreferredDateTime = new DateTime(2025, 8, 26, 5, 14, 17, 386, DateTimeKind.Utc).AddTicks(2041),
                            PropertyId = new Guid("00001801-0000-0000-0000-000000001801"),
                            PropertyTourRequestStatusId = new Guid("00001201-0000-0000-0000-000000001201"),
                            UserId = new Guid("00000301-0000-0000-0000-000000000301")
                        },
                        new
                        {
                            Id = new Guid("00002002-0000-0000-0000-000000002002"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 386, DateTimeKind.Utc).AddTicks(2049),
                            Message = "",
                            PreferredDateTime = new DateTime(2025, 8, 27, 9, 14, 17, 386, DateTimeKind.Utc).AddTicks(2050),
                            PropertyId = new Guid("00001802-0000-0000-0000-000000001802"),
                            PropertyTourRequestStatusId = new Guid("00001202-0000-0000-0000-000000001202"),
                            UserId = new Guid("00000302-0000-0000-0000-000000000302")
                        },
                        new
                        {
                            Id = new Guid("00002003-0000-0000-0000-000000002003"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 386, DateTimeKind.Utc).AddTicks(2052),
                            Message = "",
                            PreferredDateTime = new DateTime(2025, 8, 25, 11, 14, 17, 386, DateTimeKind.Utc).AddTicks(2052),
                            PropertyId = new Guid("00001803-0000-0000-0000-000000001803"),
                            PropertyTourRequestStatusId = new Guid("00001203-0000-0000-0000-000000001203"),
                            UserId = new Guid("00000303-0000-0000-0000-000000000303")
                        },
                        new
                        {
                            Id = new Guid("00002004-0000-0000-0000-000000002004"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 386, DateTimeKind.Utc).AddTicks(2053),
                            Message = "",
                            PreferredDateTime = new DateTime(2025, 8, 29, 6, 14, 17, 386, DateTimeKind.Utc).AddTicks(2054),
                            PropertyId = new Guid("00001804-0000-0000-0000-000000001804"),
                            PropertyTourRequestStatusId = new Guid("00001204-0000-0000-0000-000000001204"),
                            UserId = new Guid("00000301-0000-0000-0000-000000000301")
                        },
                        new
                        {
                            Id = new Guid("00002005-0000-0000-0000-000000002005"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 386, DateTimeKind.Utc).AddTicks(2055),
                            Message = "",
                            PreferredDateTime = new DateTime(2025, 8, 28, 4, 14, 17, 386, DateTimeKind.Utc).AddTicks(2056),
                            PropertyId = new Guid("00001805-0000-0000-0000-000000001805"),
                            PropertyTourRequestStatusId = new Guid("00001205-0000-0000-0000-000000001205"),
                            UserId = new Guid("00000302-0000-0000-0000-000000000302")
                        });
                });

            modelBuilder.Entity("Realty_Management_System_Domain.Entities.PropertyTourRequestStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PropertyTourRequestStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00001201-0000-0000-0000-000000001201"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 386, DateTimeKind.Utc).AddTicks(3924),
                            Name = "Pending"
                        },
                        new
                        {
                            Id = new Guid("00001202-0000-0000-0000-000000001202"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 386, DateTimeKind.Utc).AddTicks(3926),
                            Name = "Confirmed"
                        },
                        new
                        {
                            Id = new Guid("00001203-0000-0000-0000-000000001203"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 386, DateTimeKind.Utc).AddTicks(3926),
                            Name = "Rescheduled"
                        },
                        new
                        {
                            Id = new Guid("00001204-0000-0000-0000-000000001204"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 386, DateTimeKind.Utc).AddTicks(3927),
                            Name = "Completed"
                        },
                        new
                        {
                            Id = new Guid("00001205-0000-0000-0000-000000001205"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 386, DateTimeKind.Utc).AddTicks(3928),
                            Name = "Canceled"
                        });
                });

            modelBuilder.Entity("Realty_Management_System_Domain.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AmountPaid")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PaymentMethodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PropertyReviewId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TransactionStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("PropertyReviewId")
                        .IsUnique()
                        .HasFilter("[PropertyReviewId] IS NOT NULL");

                    b.HasIndex("TransactionStatusId");

                    b.ToTable("Transactions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00002101-0000-0000-0000-000000002101"),
                            AmountPaid = 1500.00m,
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 387, DateTimeKind.Utc).AddTicks(6629),
                            InvoiceId = new Guid("00001901-0000-0000-0000-000000001901"),
                            PaymentMethodId = new Guid("00001101-0000-0000-0000-000000001101"),
                            TransactionDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TransactionStatusId = new Guid("00000701-0000-0000-0000-000000000701")
                        },
                        new
                        {
                            Id = new Guid("00002102-0000-0000-0000-000000002102"),
                            AmountPaid = 3000.00m,
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 387, DateTimeKind.Utc).AddTicks(6634),
                            InvoiceId = new Guid("00001902-0000-0000-0000-000000001902"),
                            PaymentMethodId = new Guid("00001102-0000-0000-0000-000000001102"),
                            TransactionDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TransactionStatusId = new Guid("00000702-0000-0000-0000-000000000702")
                        },
                        new
                        {
                            Id = new Guid("00002103-0000-0000-0000-000000002103"),
                            AmountPaid = 2000.00m,
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 387, DateTimeKind.Utc).AddTicks(6636),
                            InvoiceId = new Guid("00001903-0000-0000-0000-000000001903"),
                            PaymentMethodId = new Guid("00001103-0000-0000-0000-000000001103"),
                            TransactionDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TransactionStatusId = new Guid("00000703-0000-0000-0000-000000000703")
                        },
                        new
                        {
                            Id = new Guid("00002104-0000-0000-0000-000000002104"),
                            AmountPaid = 4500.00m,
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 387, DateTimeKind.Utc).AddTicks(6637),
                            InvoiceId = new Guid("00001904-0000-0000-0000-000000001904"),
                            PaymentMethodId = new Guid("00001104-0000-0000-0000-000000001104"),
                            TransactionDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TransactionStatusId = new Guid("00000704-0000-0000-0000-000000000704")
                        },
                        new
                        {
                            Id = new Guid("00002105-0000-0000-0000-000000002105"),
                            AmountPaid = 5000.00m,
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 387, DateTimeKind.Utc).AddTicks(6638),
                            InvoiceId = new Guid("00001905-0000-0000-0000-000000001905"),
                            PaymentMethodId = new Guid("00001105-0000-0000-0000-000000001105"),
                            TransactionDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TransactionStatusId = new Guid("00000701-0000-0000-0000-000000000701")
                        });
                });

            modelBuilder.Entity("Realty_Management_System_Domain.Entities.TransactionStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("TransactionStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000701-0000-0000-0000-000000000701"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 387, DateTimeKind.Utc).AddTicks(8466),
                            Name = "Pending"
                        },
                        new
                        {
                            Id = new Guid("00000702-0000-0000-0000-000000000702"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 387, DateTimeKind.Utc).AddTicks(8468),
                            Name = "Completed"
                        },
                        new
                        {
                            Id = new Guid("00000703-0000-0000-0000-000000000703"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 387, DateTimeKind.Utc).AddTicks(8469),
                            Name = "Cancelled"
                        },
                        new
                        {
                            Id = new Guid("00000704-0000-0000-0000-000000000704"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 387, DateTimeKind.Utc).AddTicks(8470),
                            Name = "Failed"
                        });
                });

            modelBuilder.Entity("Realty_Management_System_Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfileImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("ZoneId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ZoneId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000301-0000-0000-0000-000000000301"),
                            AccessFailedCount = 0,
                            CityId = new Guid("00000101-0000-0000-0000-000000000101"),
                            ConcurrencyStamp = "ec201e1b-7fa2-4bc4-9019-0dc97a3be772",
                            CountryId = new Guid("00000001-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 388, DateTimeKind.Utc).AddTicks(4447),
                            Email = "diaa@example.com",
                            EmailConfirmed = false,
                            FirstName = "Diaa",
                            LastName = "Sharqawi",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            ProfileImageUrl = "",
                            TwoFactorEnabled = false,
                            UserName = "diaa.sharqawi",
                            ZoneId = new Guid("00000201-0000-0000-0000-000000000201")
                        },
                        new
                        {
                            Id = new Guid("00000302-0000-0000-0000-000000000302"),
                            AccessFailedCount = 0,
                            CityId = new Guid("00000102-0000-0000-0000-000000000102"),
                            ConcurrencyStamp = "34141a40-c5cf-4363-a888-d59906e5e618",
                            CountryId = new Guid("00000001-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 388, DateTimeKind.Utc).AddTicks(4534),
                            Email = "sara@example.com",
                            EmailConfirmed = false,
                            FirstName = "Sara",
                            LastName = "AbuBakr",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            ProfileImageUrl = "",
                            TwoFactorEnabled = false,
                            UserName = "sara.abubakr",
                            ZoneId = new Guid("00000202-0000-0000-0000-000000000202")
                        },
                        new
                        {
                            Id = new Guid("00000303-0000-0000-0000-000000000303"),
                            AccessFailedCount = 0,
                            CityId = new Guid("00000103-0000-0000-0000-000000000103"),
                            ConcurrencyStamp = "e20a09e9-7211-4739-86d0-4c2e39f53d11",
                            CountryId = new Guid("00000001-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 388, DateTimeKind.Utc).AddTicks(4539),
                            Email = "omar@example.com",
                            EmailConfirmed = false,
                            FirstName = "Omar",
                            LastName = "Haddad",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            ProfileImageUrl = "",
                            TwoFactorEnabled = false,
                            UserName = "omar.haddad",
                            ZoneId = new Guid("00000203-0000-0000-0000-000000000203")
                        });
                });

            modelBuilder.Entity("Realty_Management_System_Domain.Entities.Zone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(9,6)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(9,6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.ToTable("Zones");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000201-0000-0000-0000-000000000201"),
                            CityId = new Guid("00000101-0000-0000-0000-000000000101"),
                            CountryId = new Guid("00000001-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 388, DateTimeKind.Utc).AddTicks(7772),
                            Latitude = 32.2215m,
                            Longitude = 35.2540m,
                            Name = "Old City",
                            PostalCode = "NBL-001"
                        },
                        new
                        {
                            Id = new Guid("00000202-0000-0000-0000-000000000202"),
                            CityId = new Guid("00000101-0000-0000-0000-000000000101"),
                            CountryId = new Guid("00000001-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 388, DateTimeKind.Utc).AddTicks(7779),
                            Latitude = 32.2250m,
                            Longitude = 35.2590m,
                            Name = "Balata",
                            PostalCode = "NBL-002"
                        },
                        new
                        {
                            Id = new Guid("00000203-0000-0000-0000-000000000203"),
                            CityId = new Guid("00000101-0000-0000-0000-000000000101"),
                            CountryId = new Guid("00000001-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 388, DateTimeKind.Utc).AddTicks(7786),
                            Latitude = 32.2160m,
                            Longitude = 35.2470m,
                            Name = "Rafidia",
                            PostalCode = "NBL-003"
                        },
                        new
                        {
                            Id = new Guid("00000204-0000-0000-0000-000000000204"),
                            CityId = new Guid("00000101-0000-0000-0000-000000000101"),
                            CountryId = new Guid("00000001-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 388, DateTimeKind.Utc).AddTicks(7788),
                            Latitude = 32.2300m,
                            Longitude = 35.2600m,
                            Name = "Askar",
                            PostalCode = "NBL-004"
                        },
                        new
                        {
                            Id = new Guid("00000205-0000-0000-0000-000000000205"),
                            CityId = new Guid("00000101-0000-0000-0000-000000000101"),
                            CountryId = new Guid("00000001-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2025, 8, 23, 19, 14, 17, 388, DateTimeKind.Utc).AddTicks(7791),
                            Latitude = 32.2400m,
                            Longitude = 35.2700m,
                            Name = "Beit Furiq",
                            PostalCode = "NBL-005"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Realty_Management_System_Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Realty_Management_System_Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Realty_Management_System_Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Realty_Management_System_Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Realty_Management_System_Domain.Entities.City", b =>
                {
                    b.HasOne("Realty_Management_System_Domain.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Realty_Management_System_Domain.Entities.Contract", b =>
                {
                    b.HasOne("Realty_Management_System_Domain.Entities.ContractType", "ContractType")
                        .WithMany("Contracts")
                        .HasForeignKey("ContractTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Realty_Management_System_Domain.Entities.User", "Customer")
                        .WithMany("CustomerContracts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Realty_Management_System_Domain.Entities.User", "Owner")
                        .WithMany("OwnedContracts")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Realty_Management_System_Domain.Entities.PaymentFrequency", "PaymentFrequency")
                        .WithMany("Contracts")
                        .HasForeignKey("PaymentFrequencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Realty_Management_System_Domain.Entities.Property", "Property")
                        .WithMany("Contracts")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ContractType");

                    b.Navigation("Customer");

                    b.Navigation("Owner");

                    b.Navigation("PaymentFrequency");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Realty_Management_System_Domain.Entities.Invoice", b =>
                {
                    b.HasOne("Realty_Management_System_Domain.Entities.Contract", "Contract")
                        .WithMany("Invoices")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Realty_Management_System_Domain.Entities.InvoiceStatus", "InvoiceStatus")
                        .WithMany("Invoices")
                        .HasForeignKey("InvoiceStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contract");

                    b.Navigation("InvoiceStatus");
                });

            modelBuilder.Entity("Realty_Management_System_Domain.Entities.NearbyPlace", b =>
                {
                    b.HasOne("Realty_Management_System_Domain.Entities.NearbyPlaceType", "NearbyPlaceType")
                        .WithMany("NearbyPlaces")
                        .HasForeignKey("NearbyPlaceTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Realty_Management_System_Domain.Entities.Property", "Property")
                        .WithMany("NearbyPlaces")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("NearbyPlaceType");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Realty_Management_System_Domain.Entities.PriceUnit", b =>
                {
                    b.HasOne("Realty_Management_System_Domain.Entities.PriceUnitType", "PriceUnitType")
                        .WithMany("PriceUnits")
                        .HasForeignKey("PriceUnitTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PriceUnitType");
                });

            modelBuilder.Entity("Realty_Management_System_Domain.Entities.Property", b =>
                {
                    b.HasOne("Realty_Management_System_Domain.Entities.City", "City")
                        .WithMany("Properties")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Realty_Management_System_Domain.Entities.Country", "Country")
                        .WithMany("Properties")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Realty_Management_System_Domain.Entities.User", "Owner")
                        .WithMany("Properties")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Realty_Management_System_Domain.Entities.PriceUnit", "PriceUnit")
                        .WithMany("Properties")
                        .HasForeignKey("PriceUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Realty_Management_System_Domain.Entities.PropertyStatus", "PropertyStatus")
                        .WithMany("Properties")
                        .HasForeignKey("PropertyStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Realty_Management_System_Domain.Entities.Zone", "Zone")
                        .WithMany("Properties")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("Owner");

                    b.Navigation("PriceUnit");

                    b.Navigation("PropertyStatus");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("Realty_Management_System_Domain.Entities.PropertyAmenity", b =>
                {
                    b.HasOne("Realty_Management_System_Domain.Entities.Amenity", "Amenity")
                        .WithMany("PropertyAmenities")
                        .HasForeignKey("AmenityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Realty_Management_System_Domain.Entities.Property", "Property")
                        .WithMany("PropertyAmenities")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Amenity");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Realty_Management_System_Domain.Entities.PropertyCategoryAssociation", b =>
                {
                    b.HasOne("Realty_Management_System_Domain.Entities.PropertyCategory", "PropertyCategory")
                        .WithMany("PropertyCategoryAssociations")
                        .HasForeignKey("PropertyCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Realty_Management_System_Domain.Entities.Property", "Property")
                        .WithMany("PropertyCategoryAssociations")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("PropertyCategory");
                });

            modelBuilder.Entity("Realty_Management_System_Domain.Entities.PropertyFeatureAssociation", b =>
                {
                    b.HasOne("Realty_Management_System_Domain.Entities.PropertyFeature", "PropertyFeature")
                        .WithMany("PropertyFeatureAssociations")
                        .HasForeignKey("PropertyFeatureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Realty_Management_System_Domain.Entities.Property", "Property")
                        .WithMany("PropertyFeatureAssociations")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("PropertyFeature");
                });

            modelBuilder.Entity("Realty_Management_System_Domain.Entities.PropertyImage", b =>
                {
                    b.HasOne("Realty_Management_System_Domain.Entities.Property", "Property")
                        .WithMany("PropertyImages")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Realty_Management_System_Domain.Entities.PropertyReview", b =>
                {
                    b.HasOne("Realty_Management_System_Domain.Entities.Contract", "Contract")
                        .WithOne("PropertyReview")
                        .HasForeignKey("Realty_Management_System_Domain.Entities.PropertyReview", "ContractId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Realty_Management_System_Domain.Entities.Property", "Property")
                        .WithMany("PropertyReviews")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Realty_Management_System_Domain.Entities.User", "User")
                        .WithMany("PropertyReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contract");

                    b.Navigation("Property");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Realty_Management_System_Domain.Entities.PropertyTourRequest", b =>
                {
                    b.HasOne("Realty_Management_System_Domain.Entities.Property", "Property")
                        .WithMany("PropertyTourRequests")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Realty_Management_System_Domain.Entities.PropertyTourRequestStatus", "PropertyTourRequestStatus")
                        .WithMany("PropertyTourRequests")
                        .HasForeignKey("PropertyTourRequestStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Realty_Management_System_Domain.Entities.User", "User")
                        .WithMany("PropertyTourRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("PropertyTourRequestStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Realty_Management_System_Domain.Entities.Transaction", b =>
                {
                    b.HasOne("Realty_Management_System_Domain.Entities.Invoice", "Invoice")
                        .WithMany("Transactions")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Realty_Management_System_Domain.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("Transactions")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Realty_Management_System_Domain.Entities.PropertyReview", "PropertyReview")
                        .WithOne("Transaction")
                        .HasForeignKey("Realty_Management_System_Domain.Entities.Transaction", "PropertyReviewId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Realty_Management_System_Domain.Entities.TransactionStatus", "TransactionStatus")
                        .WithMany("Transactions")
                        .HasForeignKey("TransactionStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("PaymentMethod");

                    b.Navigation("PropertyReview");

                    b.Navigation("TransactionStatus");
                });

            modelBuilder.Entity("Realty_Management_System_Domain.Entities.User", b =>
                {
                    b.HasOne("Realty_Management_System_Domain.Entities.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Realty_Management_System_Domain.Entities.Country", "Country")
                        .WithMany("Users")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Realty_Management_System_Domain.Entities.Zone", "Zone")
                        .WithMany("Users")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("Realty_Management_System_Domain.Entities.Zone", b =>
                {
                    b.HasOne("Realty_Management_System_Domain.Entities.City", "City")
                        .WithMany("Zones")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Realty_Management_System_Domain.Entities.Country", "Country")
                        .WithMany("Zones")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Realty_Management_System_Domain.Entities.Amenity", b =>
                {
                    b.Navigation("PropertyAmenities");
                });

            modelBuilder.Entity("Realty_Management_System_Domain.Entities.City", b =>
                {
                    b.Navigation("Properties");

                    b.Navigation("Users");

                    b.Navigation("Zones");
                });

            modelBuilder.Entity("Realty_Management_System_Domain.Entities.Contract", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("PropertyReview");
                });

            modelBuilder.Entity("Realty_Management_System_Domain.Entities.ContractType", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("Realty_Management_System_Domain.Entities.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Properties");

                    b.Navigation("Users");

                    b.Navigation("Zones");
                });

            modelBuilder.Entity("Realty_Management_System_Domain.Entities.Invoice", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Realty_Management_System_Domain.Entities.InvoiceStatus", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("Realty_Management_System_Domain.Entities.NearbyPlaceType", b =>
                {
                    b.Navigation("NearbyPlaces");
                });

            modelBuilder.Entity("Realty_Management_System_Domain.Entities.PaymentFrequency", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("Realty_Management_System_Domain.Entities.PaymentMethod", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Realty_Management_System_Domain.Entities.PriceUnit", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("Realty_Management_System_Domain.Entities.PriceUnitType", b =>
                {
                    b.Navigation("PriceUnits");
                });

            modelBuilder.Entity("Realty_Management_System_Domain.Entities.Property", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("NearbyPlaces");

                    b.Navigation("PropertyAmenities");

                    b.Navigation("PropertyCategoryAssociations");

                    b.Navigation("PropertyFeatureAssociations");

                    b.Navigation("PropertyImages");

                    b.Navigation("PropertyReviews");

                    b.Navigation("PropertyTourRequests");
                });

            modelBuilder.Entity("Realty_Management_System_Domain.Entities.PropertyCategory", b =>
                {
                    b.Navigation("PropertyCategoryAssociations");
                });

            modelBuilder.Entity("Realty_Management_System_Domain.Entities.PropertyFeature", b =>
                {
                    b.Navigation("PropertyFeatureAssociations");
                });

            modelBuilder.Entity("Realty_Management_System_Domain.Entities.PropertyReview", b =>
                {
                    b.Navigation("Transaction")
                        .IsRequired();
                });

            modelBuilder.Entity("Realty_Management_System_Domain.Entities.PropertyStatus", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("Realty_Management_System_Domain.Entities.PropertyTourRequestStatus", b =>
                {
                    b.Navigation("PropertyTourRequests");
                });

            modelBuilder.Entity("Realty_Management_System_Domain.Entities.TransactionStatus", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Realty_Management_System_Domain.Entities.User", b =>
                {
                    b.Navigation("CustomerContracts");

                    b.Navigation("OwnedContracts");

                    b.Navigation("Properties");

                    b.Navigation("PropertyReviews");

                    b.Navigation("PropertyTourRequests");
                });

            modelBuilder.Entity("Realty_Management_System_Domain.Entities.Zone", b =>
                {
                    b.Navigation("Properties");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
